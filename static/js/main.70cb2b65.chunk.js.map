{"version":3,"sources":["components/Wrapper/index.js","components/Portrait/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Portrait","onClick","scramble","id","alt","name","src","image","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","shufflePortraits","input","i","length","randomIndex","Math","floor","random","itemAtIndex","handlePortraitClick","state","clickedPortraits","includes","handleLoss","push","setState","score","parseInt","myPortraits","handleWin","scrambledPortraits","newState","portraits","topScore","alert","_this2","reactstrap_es","color","light","expand","components_Wrapper","map","portrait","components_Portrait","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70cb2b65.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from 'react';\nimport './style.css';\n\nconst Portrait = function (props) {\n        return (\n            <div className='card' onClick={() => props.scramble(props.id)}>\n                <div className=\"img-container\">\n                    <img alt={props.name} src={props.image} />\n                </div>\n            </div>\n        );\n}\n\nexport default Portrait;","import React, { Component } from 'react';\nimport Wrapper from './components/Wrapper';\nimport Portrait from './components/Portrait';\nimport './App.css';\nimport portraits from './portraits.json';\nimport {\n  Navbar,\n  Container,\n  Row,\n  Col,\n  Jumbotron,\n} from 'reactstrap';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clickedPortraits: [],\n      myPortraits: portraits,\n      score: 0,\n      topScore: 0\n    }\n  }\n\n  shufflePortraits = (input) => {\n\n    for (let i = input.length - 1; i >= 0; i--) {\n      const randomIndex = Math.floor(Math.random() * (i + 1));\n      const itemAtIndex = input[randomIndex];\n\n      input[randomIndex] = input[i];\n      input[i] = itemAtIndex;\n    }\n\n    return input;\n  }\n\n  handlePortraitClick = id => {\n    if (this.state.clickedPortraits.includes(id)) {\n      this.handleLoss();\n    } else {\n      this.state.clickedPortraits.push(id);\n      this.setState({ score: this.state.score + 1});\n      if(parseInt(this.state.score + 1) === parseInt(this.state.myPortraits.length)) {\n        this.handleWin();\n      }\n      const scrambledPortraits = this.shufflePortraits(this.state.myPortraits);\n      this.setState({ myPortraits: scrambledPortraits });\n    }\n  }\n  handleWin = () => {\n    const newState = {\n      clickedPortraits: [],\n      myPortraits: portraits,\n      score: 0,\n      topScore: 0\n    }\n    alert('YOU WIN! Top score reset');\n    this.setState(newState);\n  }\n\n  handleLoss = () => {\n    if(this.state.score > this.state.topScore) {\n      this.setState({ topScore: this.state.score})\n    }\n    alert('YOU LOSE');\n    const newState = {\n      clickedPortraits: [],\n      myPortraits: portraits,\n      score: 0,\n    }\n    this.setState(newState);\n  }\n\n\n  render() {\n    return (\n      <div>\n        <Navbar color=\"inverse\" light expand=\"md\">\n          <ul>\n            <li className='brand'>Memory Clicks</li>\n            <li>Click an image to begin!</li>\n            <li>Top Score: {this.state.topScore}  |  Score: {this.state.score}</li>\n          </ul>\n        </Navbar>\n        <Jumbotron>\n          <Container>\n            <Row>\n              <Col className='text-center'>\n                <h1>Memory Clicks!</h1>\n                <br />\n                <p>\n                  Click on an image to earn points, but don't click on any more than once!\n                </p>\n              </Col>\n            </Row>\n          </Container>\n        </Jumbotron>\n        <Container>\n          <Wrapper>\n            {\n              this.state.myPortraits.map(portrait => (\n                <Portrait\n                  id={portrait.id}\n                  key={portrait.id}\n                  name={portrait.name}\n                  image={portrait.image}\n                  scramble={this.handlePortraitClick}\n                />))\n            }\n            {/* Game Div Here Probably */}\n          </Wrapper>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}